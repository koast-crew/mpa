<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="koast.admin.repository.UserMapper">

    <resultMap id="UserWithGroupMap" type="user">
        <id property="userId" />
        <result property="userName" />
        <association property="userGroup" javaType="userGroup">
            <id property="userGroupId"/>
            <result property="userGroupKey"/>
            <result property="userGroupName"/>
            <!-- 나머지 컬럼은 userGroup을 직접 조회해서 사용 -->
        </association>
    </resultMap>

    <resultMap id="UserWithGroupAndRolesMap" type="userWithGroupAndRolesResponse" extends="UserWithGroupMap">
        <association property="userGroup" javaType="userGroup">
            <collection property="roles" ofType="role">
                <!-- id property가 userGroupRoleId 같은데 테스트 해 봐야 겠다. -->
                <id property="roleId"/>
                <result property="roleName"/>
                <result property="roleKey"/>
                <!-- 나머지 컬럼은 role을 직접 조회해서 사용 -->
            </collection>
        </association>
    </resultMap>

    <!-- 세션 정보 -->
    <select id="findByUserIdAndPolicy" parameterType="userLoginRequest" resultType="userSession">
        /* findByUserIdAndPolicy */
        SELECT A.*, B.user_group_name AS userGroupName,
			<![CDATA[
               CASE WHEN A.last_password_change_date < (NOW() - INTERVAL '${passwordChangeTerm} DAY') THEN true
                    ELSE false
                   END AS password_change_term_over,
			]]>
			<![CDATA[
			CASE WHEN A.last_login_date IS NULL THEN A.created_date < (NOW() - INTERVAL '${lastLoginLock} DAY')
                    ELSE A.last_login_date < (NOW() - INTERVAL '${lastLoginLock} DAY')
                   END AS last_login_lock_over
			]]>
		FROM user_info A LEFT OUTER JOIN user_group B ON A.user_group_id = B.user_group_id
        WHERE A.user_id = #{userId}
    </select>

    <!-- Role 정보 -->
    <select id="findUserWithGroupAndRoles" parameterType="userLoginRequest" resultMap="UserWithGroupAndRolesResponse">
        SELECT A.*,
            B.user_group_name,
            C.user_group_role_id,
            D.role_id, D.role_name
        FROM user_info A JOIN user_group B ON A.user_group_id = B.user_group_id
            LEFT JOIN user_group_role C ON B.user_group_id = C.user_group_id
            LEFT JOIN role D ON C.role_id = D.role_id
        WHERE A.user_id = #{userId}
    </select>

    <!-- 사용자 로그인 정보 수정 -->
    <update id="updateLoginUser" parameterType="userSession">
        /* updateLoginUser */
        UPDATE user_info
        SET
        <if test="status != null and status != ''">
            status = #{status},
            modified_date = NOW(),
        </if>
        <if test="failLoginCount != null and failLoginCount gte 0">
            fail_login_count = #{failLoginCount},
        </if>
        last_login_date = NOW()
        WHERE user_id = #{userId}
    </update>
</mapper>